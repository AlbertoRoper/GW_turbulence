"""
generate_plots_JCAP_2021.py is a Python routine that can be used
to generate the plots of A. Roper Pol, S. Mandal, A. Brandenburg, and
T. Kahniashvili, "Polarization of gravitational waves from helical MHD
turbulent sources", https://arxiv.org/abs/2107.05356.

It reads the pickle run variables that can be generated by the routine
initialize_JCAP_2021.py.

The function run() executes the code.
"""

import os
import numpy as np
import matplotlib.pyplot as plt
import astropy.units as u

# get working directory, where the runs and routines should be stored
dir0 = os.getcwd() + '/'
HOME = dir0 + '/..'
os.chdir(HOME)

from dirs import read_dirs as rd
import plot_sets
import run as r
import interferometry as int
import cosmoGW
import spectra

os.chdir(dir0)

def run():

    os.chdir(HOME)

    # import dictionary with the names identifying
    # the runs and pointing to the corresponding directory
    dirs = rd('JCAP_2021_ini')
    dirs = rd('JCAP_2021_dri', dirs)
    R = [s for s in dirs]

    # read the runs stored in the pickle variables
    runs = r.load_runs(R, dir0, dirs, quiet=False)

    os.chdir(dir0)

    return runs

def plot_st(k, sp, hel=False, yks=False, N=5, Ay=1., Ay2=1.,
            Ax=1., inds_show=[], fb=False, min_sp=[], max_sp=[],
            min_sp_pos=[], max_sp_pos=[], min_sp_neg=[], max_sp_neg=[],
            yv=False, color='black'):

    """
    Function to plot the spectrum selected, with options to plot positive
    and negative values in different colors for helical spectra.

    Arguments:
        k -- array of wave numbers
        sp -- array of spectral values
        hel -- option to separate positive and negative values for spectral
               functions (red shows positive and blue shows negative)
               (default False)
        yks -- option to plot power law fits above (or below) spectra
               (default True)
        N -- number of power law fits to be used (default 5)
        Ay -- factor multiplied to the power law fits for visualization
              (default 1)
        Ax, Ay2 -- factors multiplied to the x, y positions of the text k^{a/b}
                   of the power law fits (default 1, 1)
        inds_show -- indices of the discretized spectra in power law fits where
                     we want the text k^{a/b}Â be shown (default all of them)
        fb -- option to use filled plot between maximum and minimum of
              spectra (default False)
        min_sp, max_sp -- if fb is selected we need to provide the minimum
                          and maximum of the spectral functions
        min_sp_pos, min_sp_neg, max_sp_pos, max_sp_neg -- if fb and hel are
                selected, we need to provide the maximum and minimum of
                the spectral functions (both for the positive and negative
                values)
        yv -- option to plot vertical lines over the oscillations at the
              data points (default False)
        color -- color of the spectra lines of the plot (default 'black'),
                 this option does not change the color of positive and negative
                 values of helical spectra
    """

    if hel:
        k_pos, k_neg, sp_pos, sp_neg, color = spectra.red_blue_func(k, sp)
        plt.plot(k_pos, sp_pos, '.', color='red')
        plt.plot(k_neg, abs(sp_neg), '.', color='blue')
        plt.plot(k, abs(sp), color='black', ls='dotted')
        # fb option to plot shaded regions between minimum and maximum
        # of oscillations of the helical GW energy density spectra
        if fb or yv:
            if len(min_sp_pos)*len(max_sp_pos)*len(min_sp_neg)* \
                    len(max_sp_neg) == 0:
                print('\n with the arguments hel=True and fb=True or yv=True',
                      ' you need to provide min_sp_pos, max_sp_pos',
                      ' min_sp_neg, and max_sp_neg')
            else:
                if fb:
                    plt.fill_between(k, min_sp_pos, max_sp_pos, alpha=0.1,
                                    color='red')
                    plt.fill_between(k, min_sp_neg, max_sp_neg, alpha=0.1,
                                    color='blue')
                if yv:
                    for i in range(0, len(k)):
                        plt.vlines(k[i], min_sp_neg[i], max_sp_neg[i],
                                   color='blue', ls='dashed', lw=0.6)
                        plt.vlines(k[i], min_sp_pos[i], max_sp_pos[i],
                                   color='red', ls='dashed', lw=0.6)

    else:
        plt.plot(k, sp, color=color, lw=2)
        # fb option to plot shaded regions between minimum and maximum
        # of oscillations of the helical GW energy density spectra
        if fb or yv:
            if len(min_sp)*len(max_sp) == 0:
                print('\n with the arguments hel=False and fb=True or yv=True',
                      ' you need to provide min_sp and max_sp_pos')
            else:
                if fb:
                    plt.fill_between(k, min_sp, max_sp, alpha=0.1, color=color)
                if yv:
                    for i in range(0, len(k)):
                        plt.vlines(k[i], min_sp[i], max_sp[i], color=color,
                                   ls='dashed', lw=0.6)

    if yks:
        ks, sp_ks, aks, km, sp_m = spectra.compute_yks(k, abs(sp), N)
        plt.plot(ks, sp_ks*Ay, color='black', ls='-.', lw=.5)
        show = np.zeros(N)
        if len(inds_show) > N:
            print('the indices selected in inds_show cannot be more than',
                  ' the number of discretized power laws N')
        elif len(inds_show) == 0: show += 1
        else: show[inds_show] = 1
        for i in range(0, N):
            str_exp = '$k^{%.2f}$'%aks[i]
            diff = 0.051
            for j in range(0, 3):
                str_exp, diff = spectra.str_exp(str_exp, aks[i],
                                                j + 1, diff=diff)
            if show[i]: txt = plt.text(km[i]*Ax, sp_m[i]*Ay*Ay2,
                                       str_exp, size=14)

def plot_EM_EGW(run, save=True):

    """
    Function that plots the magnetic energy and helicity spectra at the time
    of maximum magnetic energy density.
    It also plots the GW energy density and helicity spectra, averaging over
    times after the GW energy has entered a stationary oscillatory stage (this
    needs to be previously computed and stored in the run variable, see
    initialize_JCAP_2021.py).

    It corresponds to figures 1-3 of A. Roper Pol, S. Mandal, A. Brandenburg,
    and T. Kahniashvili, "Polarization of gravitational waves from helical MHD
    turbulent sources", https://arxiv.org/abs/2107.05356.

    Arguments:
        run -- variable run with spectral information
        save -- option to save the figure in plots/'name_run'EM_EGW.pdf'
                (default True)
    """

    name = run.name_run
    k = run.spectra.get('k')[1:]
    t = run.spectra.get('t_helmag')
    # read magnetic spectra
    EM = np.array(run.spectra.get('mag')[:, 1:], dtype='float')
    HM = np.array(run.spectra.get('helmag')[:, 1:], dtype='float')
    HkM = .5*k*HM
    # read GW spectra
    min_GWs = np.array(run.spectra.get('EGW_min_sp'), dtype='float')
    max_GWs = np.array(run.spectra.get('EGW_max_sp'), dtype='float')
    mean_GWs = np.array(run.spectra.get('EGW_stat_sp'), dtype='float')
    min_pos_HGWs = abs(np.array(run.spectra.get('helEGW_pos_min_sp'),
                                dtype='float'))
    min_neg_HGWs = abs(np.array(run.spectra.get('helEGW_neg_min_sp'),
                                dtype='float'))
    max_pos_HGWs = abs(np.array(run.spectra.get('helEGW_pos_max_sp'),
                                dtype='float'))
    max_neg_HGWs = abs(np.array(run.spectra.get('helEGW_neg_max_sp'),
                                dtype='float'))
    mean_HGWs = np.array(run.spectra.get('helEGW_stat_sp'), dtype='float')

    # get time that corresponds to maximum of magnetic energy density tini
    dtk = t[1]-t[0]
    indt = np.where(abs(t - run.tini) <= dtk/2)[0][0]

    fig, ax = plt.subplots(figsize=(8,5))
    plt.xscale('log')
    plt.yscale('log')
    plt.xlabel('$k$')
    plt.title(r'$E_{\rm M, GW} (k)$ and $H_{\rm M, GW} (k)$',
              fontsize=24, pad=15)

    # specific options for the plots
    N_EM = 50
    N_HM = 50
    Ay_HM = .1
    Ay2_HM = .04
    N_EGW = 15
    N_HGW = 15
    Ay2_EGW = 2.5
    xleg = 2.3e4
    yleg = 8.5e-9
    str_leg = ''
    Ay_HGW = .2
    Ay2_HGW = .03
    Ax_HGW = .9
    yks_H = True
    Ay2_EM = 3.5
    Ax_EM = .8
    Ax_HM = .8
    if 'i' in name:
        N_EM = 10
        N_HGW = 30
        N_HM = 10
        inds_show_EM = [0, 5]
        inds_show_HM = [0, 1, 2, 4, 7]
        inds_show_EGW =[0, 2, 4, 8, 11]
        inds_show_HGW = [0, 7, 14]
        Ay_HM = .2
        Ay2_HM = .05
        #Ay2_EGW = 3
        if '01' in name:
            N_HM = 11
            Ay_HGW = .1
            #Ay2_HGW = .01
            str_leg = r'$\sigma^{\rm ini}_{\rm M}=0.1$'
            Ay2_HGW = .02
        elif '3' in name:
            str_leg = r'$\sigma^{\rm ini}_{\rm M}=0.3$'
            inds_show_EGW =[0, 2, 4, 9, 12]
            inds_show_HGW = [0, 4, 7, 12, 18]
            Ax_HGW = .8
        elif '5' in name:
            str_leg = r'$\sigma^{\rm ini}_{\rm M}=0.5$'
            inds_show_HGW = [0, 4, 8, 13, 17, 22]
            Ax_HGW = .8
        elif '7' in name:
            str_leg = r'$\sigma^{\rm ini}_{\rm M}=0.7$'
        else:
            str_leg = r'$\sigma^{\rm ini}_{\rm M}=1$'
            inds_show_HGW = [1, 5, 10, 14, 19]
            Ax_HGW = .75
        yleg = 5e-13
        fs = 16
    else:
        inds_show_EM = [0, 5, 19, 26, 35, 44]
        inds_show_HM = [4, 20, 27, 34]
        inds_show_EGW = [0, 2, 6, 9, 12]
        inds_show_HGW = [0, 3, 6, 8]
        xleg = 5e2
        yleg = 1e-19
        Ay_HM = .2
        Ax_HGW = .8
        Ax_EM = .9
        Ay2_EM = 4
        if '001' in name:
            inds_show_EM = [3, 19, 26, 35, 44]
            if 'neg' in name:
                str_leg = r'$\sigma^{\rm forc}_{\rm M}=-0.01$'
            else:
                str_leg = r'$\sigma^{\rm forc}_{\rm M}=0.01$'
                Ax_EM = 1.
                inds_show_EM = [3, 20, 28, 35, 44]
            yks_H = False
        else:
            inds_show_EM = [1, 5, 20, 25, 32, 38, 44]
            inds_show_HM = [4, 18, 25, 32, 40]
            inds_show_EGW = [0, 2, 6, 8, 10, 12]
            Ax_HGW = .75
            Ay2_HGW = .02
            Ax_HM = .7
            if '3' in name:
                inds_show_EM = [1, 6, 20, 25, 32, 38, 44]
                str_leg = r'$\sigma^{\rm forc}_{\rm M}=0.3$'
            if '5' in name:
                str_leg = r'$\sigma^{\rm forc}_{\rm M}=0.5$'
            if '7' in name:
                Ax_EM = 1.
                inds_show_EM = [1, 19, 25, 32, 38, 44]
                str_leg = r'$\sigma^{\rm forc}_{\rm M}=0.7$'
            if '1' in name:
                inds_show_EM = [1, 4, 19, 25, 32, 38, 44]
                inds_show_HM = [6, 18, 25, 32, 40]
                inds_show_HGW = [0, 3, 6, 8]
                inds_show_EGW = [0, 2, 7, 10]
                Ay2_HM = .02
                Ax_HM = .75
                str_leg = r'$\sigma^{\rm forc}_{\rm M}=-1$'

    plot_st(k, EM[indt,:], yks=True, N=N_EM, inds_show=inds_show_EM,
            Ay=4, Ay2=Ay2_EM, Ax=Ax_EM)

    plot_st(k, HkM[indt,:], hel=True, yks=yks_H, N=N_HM, inds_show=inds_show_HM,
            Ay=Ay_HM, Ay2=Ay2_HM, Ax=Ax_HM)

    plot_st(k, mean_GWs, fb=True, yv=True, min_sp=min_GWs, max_sp=max_GWs,
            yks=True, N=N_EGW, inds_show=inds_show_EGW,
            Ay=4, Ay2=Ay2_EGW)

    plot_st(k, mean_HGWs, hel=True, fb=True, yv=True, min_sp_neg=min_neg_HGWs,
            max_sp_neg=max_neg_HGWs, min_sp_pos=min_pos_HGWs,
            max_sp_pos=max_pos_HGWs, yks=yks_H, N=N_HGW,
            inds_show=inds_show_HGW, Ay=Ay_HGW, Ay2=Ay2_HGW, Ax=Ax_HGW)

    handles = []
    line_mag, = ax.plot([], [], color='black', label=r'$E_{\rm M}(k)$')
    line_helpos, = ax.plot([], [], '.', label=r'$\ \frac{1}{2} k H_{\rm M}(k)$',
                           color='red')
    line_helneg, = ax.plot([], [], '.', label=r'$-\frac{1}{2} k H_{\rm M}(k)$',
                           color='blue')
    line_GW, = ax.plot([], [], color='black', label=r'$E_{\rm GW}(k)$')
    line_HGWpos, = ax.plot([], [], '.', label=r'$H_{\rm GW} (k)$',
                           color='red')
    line_HGWneg, = ax.plot([], [], '.', label=r'$-H_{\rm GW}(k)$',
                           color='blue')
    handles = [line_mag, line_helpos, line_helneg]
    lgd1 = ax.legend(handles=handles, loc='upper right', fontsize=10)
    handles2 = [line_GW, line_HGWpos, line_HGWneg]
    lgd2 = plt.legend(handles=handles2, loc='lower left', fontsize=10)
    ax = plt.gca()
    ax.add_artist(lgd1)

    plt.yticks([1e-21, 1e-19, 1e-17, 1e-15, 1e-13, 1e-11, 1e-9,
                1e-7, 1e-5, 1e-3])
    plot_sets.axes_lines()
    plt.tick_params(axis='y', direction='out', length=10)

    plt.text(xleg, yleg, str_leg, fontsize=14,
             bbox=dict(facecolor='none', edgecolor='black', boxstyle='round,pad=.5'))

    plt.xlim(100, 8e4)
    plt.ylim(1e-21, 1e-3)
    if save: plt.savefig('plots/' + run.name_run+'EM_EGW.pdf',
                         bbox_inches='tight')
